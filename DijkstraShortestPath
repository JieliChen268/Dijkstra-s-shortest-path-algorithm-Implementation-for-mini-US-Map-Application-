import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.PriorityQueue;

public class DijkstraShortestPath {
private double distance;

	public DijkstraShortestPath () {
	this.distance = 0;
	
	}
	
	public List<Node> computeShorestPaths(Node source, Node target) { 
		
        source.minDistance = 0.;
        PriorityQueue<Node> vertexQueue = new PriorityQueue<Node>();
        vertexQueue.add(source);
        double distanceThroughU = 0;
        
        while (!vertexQueue.isEmpty()) {
            Node u = vertexQueue.poll();

        // Visit each edge of exiting u

             for (Edge e : u.adjacencies) {
                Node v = e.target;
                double weight = e.weight;
                distanceThroughU = u.minDistance + weight;
                if (distanceThroughU < v.minDistance) {
                    vertexQueue.remove(v);
                    v.minDistance = distanceThroughU;
                    v.previous = u;
                    vertexQueue.add(v);
                }
              }     
        }
        
        
        List<Node> path = new ArrayList<Node>();
        
        for (Node v = target; v != null; v = v.previous) {
        	
            path.add(v);
            
        }  
        
        for (int i = 1; i < path.size(); i ++) {
        	
        	distance +=  Math.sqrt ((path.get(i).y - path.get(i - 1).y)*(path.get(i).y - path.get(i - 1).y)
               		+(path.get(i).x - path.get(i - 1).x) * (path.get(i).x - path.get(i - 1).x));
        }

        Collections.reverse(path);
        return path;
    }
	public double getDistance() {
		return distance;
	}
	
	public void setDistance(double distance) {
		this.distance = distance;
	}
	
	
	
}
